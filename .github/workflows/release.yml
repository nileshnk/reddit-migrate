name: Release

on:
  push:
    tags:
      - "v*" # Trigger on tags like v1.0.0, v0.2.1-alpha

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all tags and branches

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.21" # Specify your Go version

      - name: Get Project Name
        id: project_name
        run: |
          PROJECT_NAME=$(grep '^module' go.mod | awk '{print $2}' | sed 's|.*/||')
          if [ -z "$PROJECT_NAME" ]; then
            PROJECT_NAME="reddit-sub"
          fi
          echo "name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"

      - name: Extract version and release notes
        id: extract_info
        run: |
          TAG_NAME="${GITHUB_REF_NAME}"
          # Remove 'v' prefix for the version variable
          VERSION=$(echo "$TAG_NAME" | sed 's/^v//')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

          # Get the annotated tag message for release notes
          # Ensure the tag is an annotated tag (git tag -a vX.Y.Z -m "Release notes")
          RELEASE_NOTES=$(git tag -l "$TAG_NAME" -n --format='%(contents:body)')
          if [ -z "$RELEASE_NOTES" ]; then
            RELEASE_NOTES="Release $TAG_NAME"
          fi

          echo "TAG_NAME: $TAG_NAME"
          echo "VERSION: $VERSION"
          echo "--- Raw Release Notes Start ---"
          echo "$RELEASE_NOTES"
          echo "--- Raw Release Notes End ---"

          # Correctly set multi-line output for GITHUB_OUTPUT
          delimiter="GH_DELIMITER_$(uuidgen)"
          echo "notes<<$delimiter" >> "$GITHUB_OUTPUT"
          echo "$RELEASE_NOTES" >> "$GITHUB_OUTPUT"
          echo "$delimiter" >> "$GITHUB_OUTPUT"

      - name: Make build script executable
        run: chmod +x build.sh

      - name: Build artifacts
        run: ./build.sh ${{ steps.extract_info.outputs.version }}

      - name: Set executable permissions
        run: |
          find builds -type f -name '*-linux-*' -exec chmod +x {} \;
          find builds -type f -name '*-darwin-*' -exec chmod +x {} \;
          find builds -type f -name '*-freebsd-*' -exec chmod +x {} \;
          echo "Executable permissions set for existing builds."

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # e.g., v1.0.0
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.extract_info.outputs.notes }}
          draft: false
          prerelease: false # Set to true if it's a pre-release

      - name: Upload Linux amd64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-linux-amd64.zip
          asset_name: ${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-linux-amd64.zip
          asset_content_type: application/zip

      - name: Upload Linux arm64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-linux-arm64.zip
          asset_name: ${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-linux-arm64.zip
          asset_content_type: application/zip

      - name: Upload Windows amd64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-windows-amd64.zip
          asset_name: ${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-windows-amd64.zip
          asset_content_type: application/zip

      - name: Upload Windows arm64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-windows-arm64.zip
          asset_name: ${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-windows-arm64.zip
          asset_content_type: application/zip

      - name: Upload macOS amd64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-macos-amd64.zip
          asset_name: ${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-macos-amd64.zip
          asset_content_type: application/zip

      - name: Upload macOS arm64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-macos-arm64.zip
          asset_name: ${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-macos-arm64.zip
          asset_content_type: application/zip

      - name: Upload FreeBSD amd64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-freebsd-amd64.zip
          asset_name: ${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-freebsd-amd64.zip
          asset_content_type: application/zip

      - name: Upload FreeBSD arm64 Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./builds/${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-freebsd-arm64.zip
          asset_name: ${{ steps.project_name.outputs.name }}-${{ steps.extract_info.outputs.version }}-freebsd-arm64.zip
          asset_content_type: application/zip
